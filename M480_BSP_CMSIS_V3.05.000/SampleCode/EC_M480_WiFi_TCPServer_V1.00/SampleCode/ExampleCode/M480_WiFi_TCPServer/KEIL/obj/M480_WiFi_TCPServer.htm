<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\M480_WiFi_TCPServer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\M480_WiFi_TCPServer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 09 15:09:45 2021
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
netconn_server_processing_thread &rArr; esp_netconn_delete &rArr; flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[b8]">esp_netconn_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">flush_mboxes</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">CAN2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">CCAP_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4d]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 14 times from startup_m480.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">EADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">EADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">EADC10_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">EADC11_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">EADC12_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EADC13_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4a]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7c]">ESP_UART_DMA_RxDoneCB</a> from esp_ll_m48x.o(.text) referenced from esp_ll_m48x.o(.text)
 <LI><a href="#[7d]">ESP_UART_DMA_TxDoneCB</a> from esp_ll_m48x.o(.text) referenced from esp_ll_m48x.o(.text)
 <LI><a href="#[7e]">ESP_UART_ll_thread</a> from esp_ll_m48x.o(.text) referenced from esp_ll_m48x.o(.text)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6e]">NetworkIF_ESP8266_Task</a> from networkif_esp8266.o(.text) referenced from main.o(.text)
 <LI><a href="#[3f]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[59]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">QSPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_m480.o(.text) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">TRNG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from m48x_isr.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[81]">UART_DMA_Handler_RX</a> from m48x_uart.o(.text) referenced from m48x_uart.o(.text)
 <LI><a href="#[82]">UART_DMA_Handler_TX</a> from m48x_uart.o(.text) referenced from m48x_uart.o(.text)
 <LI><a href="#[48]">USBD20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[84]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[7b]">conn_timeout_cb</a> from esp_conn.o(.text) referenced from esp_conn.o(.text)
 <LI><a href="#[78]">def_callback</a> from esp.o(.text) referenced from esp.o(.text)
 <LI><a href="#[6f]">esp_callback_func</a> from networkif_esp8266.o(.text) referenced from networkif_esp8266.o(.text)
 <LI><a href="#[75]">esp_evt</a> from esp_netconn.o(.text) referenced from esp_netconn.o(.text)
 <LI><a href="#[80]">esp_ll_hardreset</a> from networkif_esp8266.o(.text) referenced from esp_ll_m48x.o(.text)
 <LI><a href="#[7a]">esp_thread_process</a> from esp_threads.o(.text) referenced from esp.o(.text)
 <LI><a href="#[79]">esp_thread_produce</a> from esp_threads.o(.text) referenced from esp.o(.text)
 <LI><a href="#[77]">espi_initiate_cmd</a> from esp_int.o(.text) referenced 5 times from esp_ap.o(.text)
 <LI><a href="#[83]">fputc</a> from retarget.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[6a]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[76]">netconn_evt</a> from esp_netconn.o(.text) referenced from esp_netconn.o(.text)
 <LI><a href="#[71]">netconn_server_processing_thread</a> from netconnserver.o(.text) referenced from netconnserver.o(.text)
 <LI><a href="#[70]">netconn_server_thread</a> from netconnserver.o(.text) referenced from networkif_esp8266.o(.text)
 <LI><a href="#[73]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[72]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[74]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[7f]">send_data</a> from esp_ll_m48x.o(.text) referenced from esp_ll_m48x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[204]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1fe]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[205]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[206]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[207]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[208]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[209]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[bf]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_m480.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, system_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[95]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationMallocFailedHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[104]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[20b]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>esp_ll_hardreset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, networkif_esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = esp_ll_hardreset &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_ll_m48x.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>esp_ll_switch_pin_fun</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, networkif_esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = esp_ll_switch_pin_fun &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
</UL>

<P><STRONG><a name="[1d4]"></a>esp_ll_get_uart_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, networkif_esp8266.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
</UL>

<P><STRONG><a name="[6e]"></a>NetworkIF_ESP8266_Task</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, networkif_esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = NetworkIF_ESP8266_Task &rArr; esp_init &rArr; esp_restore &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_create
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_wifi_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_at_baudrate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_configure
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>netconn_server_thread</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, netconnserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = netconn_server_thread &rArr; esp_netconn_delete &rArr; flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_bind
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_accept
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_create
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> networkif_esp8266.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[be]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[bd]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[107]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[c3]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[c5]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[115]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[f3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[fa]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[f6]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[c2]"></a>xQueueGenericReset</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[c7]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_create
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[cf]"></a>xQueueGenericSend</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_put
</UL>

<P><STRONG><a name="[d5]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_create
</UL>

<P><STRONG><a name="[d6]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_unlock
</UL>

<P><STRONG><a name="[d8]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[dd]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_lock
</UL>

<P><STRONG><a name="[de]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[df]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[e0]"></a>xQueueGiveFromISR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[e2]"></a>xQueueReceive</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_getnow
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
</UL>

<P><STRONG><a name="[e3]"></a>xQueuePeek</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[e4]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSetFromISR
</UL>

<P><STRONG><a name="[e5]"></a>xQueuePeekFromISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[e6]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
</UL>

<P><STRONG><a name="[e7]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[20c]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[e8]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_delete
</UL>

<P><STRONG><a name="[20d]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>ucQueueGetQueueType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[212]"></a>pcQueueGetName</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ed]"></a>xQueueCreateSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ee]"></a>xQueueAddToSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[ef]"></a>xQueueRemoveFromSet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[f0]"></a>xQueueSelectFromSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f1]"></a>xQueueSelectFromSetFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[92]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_create
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[f5]"></a>vTaskDelete</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
</UL>

<P><STRONG><a name="[c1]"></a>xTaskIncrementTick</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d3]"></a>xTaskResumeAll</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d1]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fb]"></a>vTaskDelayUntil</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[fc]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[fd]"></a>eTaskGetState</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[fe]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[213]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>vTaskPrioritySet</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[8e]"></a>vTaskSwitchContext</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[100]"></a>vTaskSuspend</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[101]"></a>vTaskResume</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[103]"></a>xTaskResumeFromISR</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[94]"></a>vTaskStartScheduler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>vTaskEndScheduler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[123]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_now
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_put
</UL>

<P><STRONG><a name="[214]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>pcTaskGetName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>vTaskGetInfo</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[10a]"></a>uxTaskGetSystemState</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[d4]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[10b]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[ec]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[c6]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[10c]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[10d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[d0]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d2]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[ce]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[217]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[119]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[db]"></a>xTaskPriorityInherit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[cb]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[dc]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[219]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[10e]"></a>ulTaskNotifyTake</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[10f]"></a>xTaskNotifyWait</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[110]"></a>xTaskGenericNotify</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[111]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[112]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[113]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[118]"></a>xTimerGenericCommand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[105]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[11e]"></a>xTimerCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>

<P><STRONG><a name="[21a]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>xTimerGetPeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>pcTimerGetName</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[120]"></a>pvTimerGetTimerID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[121]"></a>vTimerSetTimerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[21e]"></a>uxTimerGetTimerNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>vTimerSetTimerNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>pvPortMalloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ea]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[220]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[87]"></a>kbhit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[88]"></a>IsDebugFifoEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[89]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[83]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[8a]"></a>fgetc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[8b]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[222]"></a>SYS_ClearResetSrc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>SYS_GetBODStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>SYS_GetResetSrc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>SYS_IsRegLocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>SYS_ReadPDID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>SYS_ResetChip</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>SYS_ResetCPU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>SYS_ResetModule</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[229]"></a>SYS_EnableBOD</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>SYS_DisableBOD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>SYS_SetPowerLevel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>SYS_SetVRef</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>UART_ClearIntFlag</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>UART_Close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
</UL>

<P><STRONG><a name="[1f4]"></a>UART_DisableFlowCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
</UL>

<P><STRONG><a name="[1f5]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
</UL>

<P><STRONG><a name="[22e]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>UART_EnableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>UART_Open</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[230]"></a>UART_Read</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>UART_SetLineConfig</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetLineConfig &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[1f1]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[126]"></a>UART_SelectIrDAMode</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[231]"></a>UART_SelectRS485Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>UART_SelectLINMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>UART_Write</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableCKO
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
</UL>

<P><STRONG><a name="[127]"></a>CLK_DisableCKO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
</UL>

<P><STRONG><a name="[9a]"></a>CLK_SetModuleClock</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[99]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[129]"></a>CLK_EnableCKO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>

<P><STRONG><a name="[234]"></a>CLK_PowerDown</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>CLK_Idle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[12b]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[12c]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>

<P><STRONG><a name="[12d]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[97]"></a>CLK_WaitClockReady</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPowerDownMode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[12e]"></a>CLK_SetHCLK</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[90]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SelectIrDAMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
</UL>

<P><STRONG><a name="[130]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[12f]"></a>CLK_EnablePLL</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[98]"></a>CLK_SetCoreClock</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[238]"></a>CLK_SetSysTickClockSrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[239]"></a>CLK_DisableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>CLK_EnableSysTick</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>CLK_DisableSysTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>CLK_SetPowerDownMode</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>

<P><STRONG><a name="[23c]"></a>CLK_EnableDPDWKPin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>CLK_GetPMUWKSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>CLK_EnableSPDWKPin</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, clk.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>PDMA_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[241]"></a>PDMA_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pdma.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>PDMA_SetTransferCnt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>

<P><STRONG><a name="[242]"></a>PDMA_SetStride</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pdma.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>PDMA_SetRepeat</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pdma.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>PDMA_SetTransferAddr</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>

<P><STRONG><a name="[1ec]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 310 bytes, Stack size 12 bytes, pdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>

<P><STRONG><a name="[1ef]"></a>PDMA_SetBurstType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>

<P><STRONG><a name="[244]"></a>PDMA_EnableTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pdma.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>PDMA_DisableTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_PDMA_Irq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>

<P><STRONG><a name="[1e3]"></a>PDMA_SetTimeOut</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>

<P><STRONG><a name="[245]"></a>PDMA_Trigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pdma.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>PDMA_EnableInt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>

<P><STRONG><a name="[1e4]"></a>PDMA_DisableInt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_SetMode</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_switch_pin_fun
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_hardreset
</UL>

<P><STRONG><a name="[246]"></a>GPIO_EnableInt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>GPIO_DisableInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>GPIO_SetSlewCtl</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>GPIO_SetPullCtl</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>esp_netconn_flush</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = esp_netconn_flush &rArr; esp_conn_send &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
</UL>

<P><STRONG><a name="[b8]"></a>esp_netconn_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_arg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_flush
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>

<P><STRONG><a name="[b2]"></a>esp_netconn_delete</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = esp_netconn_delete &rArr; flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_server
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[b9]"></a>esp_netconn_new</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = esp_netconn_new &rArr; esp_evt_register &rArr; esp_mem_malloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_isvalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_invalid
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_create
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_calloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_register
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[14c]"></a>esp_netconn_connect</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, esp_netconn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_start
</UL>

<P><STRONG><a name="[ba]"></a>esp_netconn_bind</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_netconn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
</UL>

<P><STRONG><a name="[24a]"></a>esp_netconn_set_listen_conn_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_netconn.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>esp_netconn_listen_with_max_conn</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = esp_netconn_listen_with_max_conn &rArr; esp_set_server &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_server
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen
</UL>

<P><STRONG><a name="[bb]"></a>esp_netconn_listen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = esp_netconn_listen &rArr; esp_netconn_listen_with_max_conn &rArr; esp_set_server &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen_with_max_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
</UL>

<P><STRONG><a name="[bc]"></a>esp_netconn_accept</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = esp_netconn_accept &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
</UL>

<P><STRONG><a name="[b7]"></a>esp_netconn_write</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = esp_netconn_write &rArr; esp_conn_send &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
</UL>

<P><STRONG><a name="[151]"></a>esp_netconn_send</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, esp_netconn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
</UL>

<P><STRONG><a name="[152]"></a>esp_netconn_sendto</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, esp_netconn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_sendto
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
</UL>

<P><STRONG><a name="[b0]"></a>esp_netconn_receive</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_netconn_receive &rArr; esp_sys_mbox_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
</UL>

<P><STRONG><a name="[154]"></a>esp_netconn_getconnnum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp_netconn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_getnum
</UL>

<P><STRONG><a name="[24b]"></a>esp_netconn_set_receive_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_netconn.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>esp_netconn_get_receive_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_netconn.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>esp_ap_getip</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, esp_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[158]"></a>esp_ap_setip</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, esp_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[159]"></a>esp_ap_getmac</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, esp_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[15a]"></a>esp_ap_setmac</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, esp_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[a9]"></a>esp_ap_configure</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, esp_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = esp_ap_configure &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
</UL>

<P><STRONG><a name="[15b]"></a>esp_ap_list_sta</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, esp_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[13e]"></a>esp_core_unlock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_accept
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_set_present
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_unregister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_calloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_register
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_is_present
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_arg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_server
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_client
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_arg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen_with_max_conn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_remove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_copy_ip
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_realloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_input_process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_local_port
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_remote_port
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_remote_ip
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_total_recved_count
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_closed
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_get_val_id
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
</UL>

<P><STRONG><a name="[139]"></a>esp_core_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = esp_core_lock &rArr; esp_sys_protect &rArr; esp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_accept
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_set_present
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_unregister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_calloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_register
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_is_present
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_arg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_server
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_client
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_arg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen_with_max_conn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_remove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_copy_ip
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_realloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_input_process
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_local_port
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_remote_port
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_remote_ip
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_total_recved_count
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_closed
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_get_val_id
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
</UL>

<P><STRONG><a name="[15e]"></a>esp_restore</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = esp_restore &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
</UL>

<P><STRONG><a name="[a4]"></a>esp_init</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = esp_init &rArr; esp_restore &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_isvalid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_invalid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_delete
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_create
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_restore
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_isvalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_invalid
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_create
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
</UL>

<P><STRONG><a name="[169]"></a>esp_reset_with_delay</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = esp_reset_with_delay &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_set_present
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset
</UL>

<P><STRONG><a name="[16a]"></a>esp_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = esp_reset &rArr; esp_reset_with_delay &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset_with_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
</UL>

<P><STRONG><a name="[a7]"></a>esp_set_wifi_mode</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = esp_set_wifi_mode &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
</UL>

<P><STRONG><a name="[a5]"></a>esp_set_at_baudrate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = esp_set_at_baudrate &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
</UL>

<P><STRONG><a name="[13f]"></a>esp_set_server</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = esp_set_server &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_listen_with_max_conn
</UL>

<P><STRONG><a name="[16b]"></a>esp_update_sw</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, esp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[142]"></a>esp_evt_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = esp_evt_register &rArr; esp_mem_malloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
</UL>

<P><STRONG><a name="[16c]"></a>esp_evt_unregister</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, esp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[16d]"></a>esp_device_set_present</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, esp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset_with_delay
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[140]"></a>esp_device_is_present</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_device_is_present &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt
</UL>

<P><STRONG><a name="[9f]"></a>esp_get_current_at_fw_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
</UL>

<P><STRONG><a name="[ab]"></a>esp_delay</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = esp_delay &rArr; esp_sys_sem_create &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_delete
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
</UL>

<P><STRONG><a name="[16f]"></a>espi_conn_start_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = espi_conn_start_timeout &rArr; esp_timeout_add &rArr; esp_mem_calloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_timeout_cb
</UL>

<P><STRONG><a name="[172]"></a>espi_conn_get_val_id</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = espi_conn_get_val_id &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
</UL>

<P><STRONG><a name="[165]"></a>espi_conn_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, esp_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
</UL>

<P><STRONG><a name="[14d]"></a>esp_conn_start</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_connect
</UL>

<P><STRONG><a name="[137]"></a>esp_conn_close</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_get_val_id
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
</UL>

<P><STRONG><a name="[153]"></a>esp_conn_sendto</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_sendto
</UL>

<P><STRONG><a name="[134]"></a>esp_conn_send</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = esp_conn_send &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_flush
</UL>

<P><STRONG><a name="[14a]"></a>esp_conn_recved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_conn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[136]"></a>esp_conn_set_arg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_conn_set_arg &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[147]"></a>esp_conn_get_arg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_conn_get_arg &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[175]"></a>esp_get_conns_status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[146]"></a>esp_conn_is_client</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_conn_is_client &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_is_valid_conn_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[148]"></a>esp_conn_is_server</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_conn_is_server &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_is_valid_conn_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[133]"></a>esp_conn_is_active</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_conn_is_active &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_is_valid_conn_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_sendto
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_flush
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[177]"></a>esp_conn_is_closed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_is_valid_conn_ptr
</UL>

<P><STRONG><a name="[155]"></a>esp_conn_getnum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_is_valid_conn_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_getconnnum
</UL>

<P><STRONG><a name="[178]"></a>esp_conn_set_ssl_buffersize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[145]"></a>esp_conn_get_from_evt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, esp_conn.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_send_get_conn
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_recv_get_conn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_poll_get_conn
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_close_get_conn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_active_get_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[17e]"></a>esp_conn_write</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[17f]"></a>esp_conn_get_total_recved_count</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[180]"></a>esp_conn_get_remote_ip</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[181]"></a>esp_conn_get_remote_port</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[182]"></a>esp_conn_get_local_port</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, esp_conn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[9e]"></a>esp_evt_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt
</UL>

<P><STRONG><a name="[24d]"></a>esp_evt_reset_detected_is_forced</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>esp_evt_reset_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>esp_evt_restore_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>esp_evt_ap_ip_sta_get_mac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
</UL>

<P><STRONG><a name="[a2]"></a>esp_evt_ap_ip_sta_get_ip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
</UL>

<P><STRONG><a name="[a0]"></a>esp_evt_ap_connected_sta_get_mac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
</UL>

<P><STRONG><a name="[a3]"></a>esp_evt_ap_disconnected_sta_get_mac</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
</UL>

<P><STRONG><a name="[149]"></a>esp_evt_conn_recv_get_buff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
</UL>

<P><STRONG><a name="[17b]"></a>esp_evt_conn_recv_get_conn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
</UL>

<P><STRONG><a name="[17c]"></a>esp_evt_conn_send_get_conn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
</UL>

<P><STRONG><a name="[250]"></a>esp_evt_conn_send_get_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>esp_evt_conn_send_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>esp_evt_conn_active_get_conn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
</UL>

<P><STRONG><a name="[252]"></a>esp_evt_conn_active_is_client</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>esp_evt_conn_close_get_conn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
</UL>

<P><STRONG><a name="[253]"></a>esp_evt_conn_close_is_client</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>esp_evt_conn_close_is_forced</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>esp_evt_conn_close_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>esp_evt_conn_poll_get_conn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
</UL>

<P><STRONG><a name="[256]"></a>esp_evt_conn_error_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>esp_evt_conn_error_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>esp_evt_conn_error_get_host</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>esp_evt_conn_error_get_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>esp_evt_conn_error_get_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>esp_evt_sta_list_ap_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>esp_evt_sta_list_ap_get_aps</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>esp_evt_sta_list_ap_get_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>esp_evt_sta_join_ap_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>esp_evt_sta_info_ap_get_ssid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>esp_evt_sta_info_ap_get_mac</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>esp_evt_sta_info_ap_get_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>esp_evt_sta_info_ap_get_rssi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>esp_evt_sta_info_ap_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>esp_evt_dns_hostbyname_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>esp_evt_dns_hostbyname_get_host</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>esp_evt_dns_hostbyname_get_ip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>esp_evt_server_get_result</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>esp_evt_server_get_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>esp_evt_server_is_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_evt.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>esp_input_process</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, esp_input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = esp_input_process &rArr; espi_process &rArr; espi_parse_received &rArr; espi_process_sub_cmd &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_ll_thread
</UL>

<P><STRONG><a name="[186]"></a>espi_send_ip_mac</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = espi_send_ip_mac &rArr; esp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_u32_to_gen_str
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[188]"></a>espi_send_string</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = espi_send_string
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
</UL>

<P><STRONG><a name="[189]"></a>espi_send_number</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = espi_send_number &rArr; esp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_u32_to_gen_str
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[18a]"></a>espi_send_port</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = espi_send_port &rArr; esp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_u32_to_gen_str
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[18b]"></a>espi_send_signed_number</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, esp_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_i32_to_gen_str
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[171]"></a>espi_send_conn_cb</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_events_for_timeout_or_error
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_connections
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_sub_cmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_timeout_cb
</UL>

<P><STRONG><a name="[164]"></a>espi_send_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = espi_send_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_set_present
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_ip_sta
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_conn_disconn_sta
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_events_for_timeout_or_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_sub_cmd
</UL>

<P><STRONG><a name="[16e]"></a>espi_reset_everything</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = espi_reset_everything &rArr; reset_connections &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_connections
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_set_present
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[184]"></a>espi_process</STRONG> (Thumb, 786 bytes, Stack size 40 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = espi_process &rArr; espi_parse_received &rArr; espi_process_sub_cmd &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_unicode_decode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_set_ip
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_new
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_input_process
</UL>

<P><STRONG><a name="[77]"></a>espi_initiate_cmd</STRONG> (Thumb, 2110 bytes, Stack size 24 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = espi_initiate_cmd &rArr; espi_tcpip_process_send_data &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_port
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_number
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_string
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_ip_mac
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_error_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PORT_SEND_CUR_DEF
</UL>
<BR>[Address Reference Count : 4]<UL><LI> esp.o(.text)
<LI> esp_conn.o(.text)
<LI> esp_ap.o(.text)
<LI> esp_sta.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>espi_is_valid_conn_ptr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, esp_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_server
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_client
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_getnum
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_closed
</UL>

<P><STRONG><a name="[157]"></a>espi_send_msg_to_producer_mbox</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_isvalid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_invalid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_delete
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_wifi_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_at_baudrate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_configure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_update_sw
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset_with_delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_list_sta
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setmac
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getmac
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setip
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getip
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_server
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_list_ap
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setmac
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getmac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_autojoin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_join
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_quit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getip
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_ssl_buffersize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_get_conns_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_get_ap_info
</UL>

<P><STRONG><a name="[1ac]"></a>espi_process_events_for_timeout_or_error</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = espi_process_events_for_timeout_or_error &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_error_cb
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
</UL>

<P><STRONG><a name="[150]"></a>esp_mem_malloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_mem_malloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_wifi_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_at_baudrate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_configure
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_update_sw
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset_with_delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_list_sta
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setmac
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getmac
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setip
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getip
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_server
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_register
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_list_ap
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setmac
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getmac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_autojoin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_join
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_quit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getip
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_ssl_buffersize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_get_conns_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_get_ap_info
</UL>

<P><STRONG><a name="[1b1]"></a>esp_mem_realloc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, esp_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[143]"></a>esp_mem_calloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_mem_calloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
</UL>

<P><STRONG><a name="[1b2]"></a>esp_mem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
</UL>

<P><STRONG><a name="[1b3]"></a>esp_mem_assignmemory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = esp_mem_assignmemory &rArr; mem_assignmem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_assignmem
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
</UL>

<P><STRONG><a name="[135]"></a>esp_mem_free_s</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_unregister
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_flush
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_remove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_events_for_timeout_or_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
</UL>

<P><STRONG><a name="[19c]"></a>espi_parse_number</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = espi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_port
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_link_conn
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ipd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwjap
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwdhcp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipstatus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_at_sdk_version
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1b5]"></a>espi_parse_port</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = espi_parse_port &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ipd
</UL>

<P><STRONG><a name="[1b6]"></a>espi_parse_hexnumber</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = espi_parse_hexnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
</UL>

<P><STRONG><a name="[1b7]"></a>espi_parse_string</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = espi_parse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwjap
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipstatus
</UL>

<P><STRONG><a name="[19a]"></a>espi_parse_ip</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_link_conn
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ipd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlif
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipstatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipdomain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_ip_sta
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[198]"></a>espi_parse_mac</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = espi_parse_mac &rArr; espi_parse_hexnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_hexnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlif
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwjap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_ip_sta
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_conn_disconn_sta
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a2]"></a>espi_parse_cipstatus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = espi_parse_cipstatus &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_string
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[195]"></a>espi_parse_ipd</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = espi_parse_ipd &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_port
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a1]"></a>espi_parse_at_sdk_version</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = espi_parse_at_sdk_version &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a5]"></a>espi_parse_link_conn</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = espi_parse_link_conn &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[19b]"></a>espi_parse_cwlap</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = espi_parse_cwlap &rArr; espi_parse_mac &rArr; espi_parse_hexnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_string
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[19d]"></a>espi_parse_cwjap</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = espi_parse_cwjap &rArr; espi_parse_mac &rArr; espi_parse_hexnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_string
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a3]"></a>espi_parse_cwlif</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = espi_parse_cwlif &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[196]"></a>espi_parse_ap_conn_disconn_sta</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = espi_parse_ap_conn_disconn_sta &rArr; espi_parse_mac &rArr; espi_parse_hexnumber
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[197]"></a>espi_parse_ap_ip_sta</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = espi_parse_ap_ip_sta &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[19e]"></a>espi_parse_cipdomain</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = espi_parse_cipdomain &rArr; espi_parse_ip &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[19f]"></a>espi_parse_cwdhcp</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, esp_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = espi_parse_cwdhcp &rArr; espi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a7]"></a>esp_pbuf_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_pbuf_new &rArr; esp_mem_malloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[b1]"></a>esp_pbuf_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = esp_pbuf_free &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_chain
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[b4]"></a>esp_pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = esp_pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_chain
</UL>

<P><STRONG><a name="[14b]"></a>esp_pbuf_ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp_pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_chain
</UL>

<P><STRONG><a name="[1b9]"></a>esp_pbuf_chain</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_cat
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_ref
</UL>

<P><STRONG><a name="[26a]"></a>esp_pbuf_unchain</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, esp_pbuf.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>esp_pbuf_take</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1bc]"></a>esp_pbuf_copy</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1bd]"></a>esp_pbuf_get_at</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = esp_pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_memcmp
</UL>

<P><STRONG><a name="[1be]"></a>esp_pbuf_memcmp</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = esp_pbuf_memcmp &rArr; esp_pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_strcmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_memfind
</UL>

<P><STRONG><a name="[1bf]"></a>esp_pbuf_memfind</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = esp_pbuf_memfind &rArr; esp_pbuf_memcmp &rArr; esp_pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_strfind
</UL>

<P><STRONG><a name="[b5]"></a>esp_pbuf_strfind</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp_pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = esp_pbuf_strfind &rArr; esp_pbuf_memfind &rArr; esp_pbuf_memcmp &rArr; esp_pbuf_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_memfind
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
</UL>

<P><STRONG><a name="[1c0]"></a>esp_pbuf_strcmp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_memcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1c1]"></a>esp_pbuf_get_linear_addr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[26b]"></a>esp_pbuf_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp_pbuf.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>esp_pbuf_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
</UL>

<P><STRONG><a name="[1a8]"></a>esp_pbuf_set_ip</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp_pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[26c]"></a>esp_pbuf_advance</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, esp_pbuf.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>esp_pbuf_skip</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[1c3]"></a>esp_pbuf_dump</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_dump
</UL>

<P><STRONG><a name="[1c4]"></a>esp_sta_quit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1c5]"></a>esp_sta_join</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1c6]"></a>esp_sta_autojoin</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1aa]"></a>esp_sta_has_ip</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp_sta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = esp_sta_has_ip &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_copy_ip
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_is_joined
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_get_ap_info
</UL>

<P><STRONG><a name="[1c7]"></a>esp_sta_is_joined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
</UL>

<P><STRONG><a name="[1c8]"></a>esp_sta_get_ap_info</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1a0]"></a>esp_sta_getip</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, esp_sta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = esp_sta_getip &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1c9]"></a>esp_sta_setip</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1ca]"></a>esp_sta_getmac</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1cb]"></a>esp_sta_setmac</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1cc]"></a>esp_sta_copy_ip</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_has_ip
</UL>

<P><STRONG><a name="[1cd]"></a>esp_sta_list_ap</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, esp_sta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[26d]"></a>esp_sta_is_ap_802_11b</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp_sta.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>esp_sta_is_ap_802_11g</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp_sta.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>esp_sta_is_ap_802_11n</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esp_sta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>esp_thread_produce</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, esp_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = esp_thread_produce &rArr; espi_reset_everything &rArr; reset_connections &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_wait
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_isvalid
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_invalid
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_delete
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_events_for_timeout_or_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>esp_thread_process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, esp_threads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = esp_thread_process &rArr; espi_get_from_mbox_with_timeout_checks &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_isvalid
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>espi_get_from_mbox_with_timeout_checks</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, esp_timeout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = espi_get_from_mbox_with_timeout_checks &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_process
</UL>

<P><STRONG><a name="[170]"></a>esp_timeout_add</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, esp_timeout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = esp_timeout_add &rArr; esp_mem_calloc &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_calloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_start_timeout
</UL>

<P><STRONG><a name="[1d0]"></a>esp_timeout_remove</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, esp_timeout.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[1a9]"></a>espi_unicode_decode</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, esp_unicode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = espi_unicode_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[187]"></a>esp_u32_to_gen_str</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, esp_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = esp_u32_to_gen_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_i32_to_gen_str
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_port
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_number
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_ip_mac
</UL>

<P><STRONG><a name="[18c]"></a>esp_i32_to_gen_str</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, esp_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_u32_to_gen_str
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_signed_number
</UL>

<P><STRONG><a name="[a6]"></a>configure_uart</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = configure_uart &rArr; esp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_create
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_get_uart_obj
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_switch_pin_fun
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_create
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Disable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
</UL>

<P><STRONG><a name="[163]"></a>esp_ll_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = esp_ll_init &rArr; configure_uart &rArr; esp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_assignmemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1db]"></a>esp_ll_deinit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, esp_ll_m48x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_switch_pin_fun
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Disable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15f]"></a>esp_sys_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = esp_sys_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
</UL>

<P><STRONG><a name="[1cf]"></a>esp_sys_now</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
</UL>

<P><STRONG><a name="[1dc]"></a>esp_sys_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = esp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_protect
</UL>

<P><STRONG><a name="[15d]"></a>esp_sys_protect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = esp_sys_protect &rArr; esp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>

<P><STRONG><a name="[1dd]"></a>esp_sys_mutex_unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_unprotect
</UL>

<P><STRONG><a name="[15c]"></a>esp_sys_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
</UL>

<P><STRONG><a name="[1de]"></a>esp_sys_mutex_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1df]"></a>esp_sys_mutex_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[270]"></a>esp_sys_mutex_isvalid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>esp_sys_mutex_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>esp_sys_sem_create</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = esp_sys_sem_create &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[167]"></a>esp_sys_sem_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = esp_sys_sem_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[161]"></a>esp_sys_sem_wait</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = esp_sys_sem_wait &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[162]"></a>esp_sys_sem_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = esp_sys_sem_release &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_process
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[166]"></a>esp_sys_sem_isvalid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_process
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[168]"></a>esp_sys_sem_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[144]"></a>esp_sys_mbox_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = esp_sys_mbox_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
</UL>

<P><STRONG><a name="[13c]"></a>esp_sys_mbox_delete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = esp_sys_mbox_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
</UL>

<P><STRONG><a name="[1ab]"></a>esp_sys_mbox_put</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = esp_sys_mbox_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[14f]"></a>esp_sys_mbox_get</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = esp_sys_mbox_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_receive
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_accept
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_thread_produce
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_ll_thread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[141]"></a>esp_sys_mbox_putnow</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = esp_sys_mbox_putnow &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_RxDoneCB
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_TxDoneCB
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_timeout_add
</UL>

<P><STRONG><a name="[13b]"></a>esp_sys_mbox_getnow</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = esp_sys_mbox_getnow &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>

<P><STRONG><a name="[13a]"></a>esp_sys_mbox_isvalid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_evt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>

<P><STRONG><a name="[13d]"></a>esp_sys_mbox_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mboxes
</UL>

<P><STRONG><a name="[aa]"></a>esp_sys_thread_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = esp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
</UL>

<P><STRONG><a name="[a8]"></a>esp_sys_thread_terminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, esp_sys_freertos_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = esp_sys_thread_terminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
</UL>

<P><STRONG><a name="[272]"></a>esp_sys_thread_yield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, esp_sys_freertos_os.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>dma_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_init &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_allocate
</UL>

<P><STRONG><a name="[1e8]"></a>dma_channel_allocate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_channel_allocate &rArr; dma_init &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Enable
</UL>

<P><STRONG><a name="[1f3]"></a>dma_channel_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Disable
</UL>

<P><STRONG><a name="[1f7]"></a>dma_set_handler</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Enable
</UL>

<P><STRONG><a name="[1f8]"></a>dma_unset_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Disable
</UL>

<P><STRONG><a name="[273]"></a>dma_modbase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>dma_untransfer_bytecount</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_RxDoneCB
</UL>

<P><STRONG><a name="[1ea]"></a>Handle_PDMA_Irq</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Handle_PDMA_Irq &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nu_ctz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>dma_fill_description</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dma_fill_description &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetBurstType
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_pdma_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TX_Start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Start
</UL>

<P><STRONG><a name="[1d5]"></a>UART_Init</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Init &rArr; UART_SetLineConfig &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLineConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
</UL>

<P><STRONG><a name="[1d8]"></a>UART_Final</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Final
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableFlowCtrl
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
</UL>

<P><STRONG><a name="[1f9]"></a>Handle_UART_Irq</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Handle_UART_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>UART_DMA_TXRX_Enable</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMA_TXRX_Enable &rArr; dma_channel_allocate &rArr; dma_init &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_set_handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
</UL>

<P><STRONG><a name="[1d7]"></a>UART_DMA_TXRX_Disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMA_TXRX_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_unset_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
</UL>

<P><STRONG><a name="[1d1]"></a>UART_DMA_RX_Start</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_DMA_RX_Start &rArr; dma_fill_description &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_RxDoneCB
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_ll_thread
</UL>

<P><STRONG><a name="[1d3]"></a>UART_DMA_RX_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMA_RX_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_RxDoneCB
</UL>

<P><STRONG><a name="[1d9]"></a>UART_DMA_TX_Start</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_DMA_TX_Start &rArr; dma_fill_description &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[1da]"></a>UART_DMA_TX_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMA_TX_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[1f0]"></a>get_modinit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nu_modutil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Final
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TX_Stop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TX_Start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Enable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_Handler_RX
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_Handler_TX
</UL>

<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PDMA_IRQHandler &rArr; Handle_PDMA_Irq &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_PDMA_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m48x_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; Handle_UART_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_UART_Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_copy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_take
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_realloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_write
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenPinNameStr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_wifi_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_at_baudrate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_configure
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_update_sw
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_reset_with_delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_list_sta
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setmac
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getmac
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_setip
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_getip
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_set_server
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_list_ap
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setmac
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getmac
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_setip
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_autojoin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_join
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_quit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getip
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_ssl_buffersize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_get_conns_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_get_ap_info
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_received_current_setting
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1b8]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ipd
</UL>

<P><STRONG><a name="[af]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_strfind
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenPinNameStr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ap_configure
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_strcmp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_signed_number
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_port
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_number
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_string
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_ip_mac
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PORT_SEND_CUR_DEF
</UL>

<P><STRONG><a name="[193]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[194]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_link_conn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[279]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[27a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[27b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27e]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[93]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_thread
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_callback_func
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkIF_ESP8266_Task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_deinit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_DMA_RxDoneCB
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_UART_ll_thread
</UL>

<P><STRONG><a name="[201]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[ae]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenPinNameStr
</UL>

<P><STRONG><a name="[280]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[281]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[282]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>prvSetupHardware</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvSetupHardware &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>esp_callback_func</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, networkif_esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = esp_callback_func &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_get_current_at_fw_version
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_get_type
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_ap_ip_sta_get_mac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_ap_ip_sta_get_ip
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_ap_disconnected_sta_get_mac
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_ap_connected_sta_get_mac
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> networkif_esp8266.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>GenPinNameStr</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, netconnserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GenPinNameStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_server_processing_thread
</UL>

<P><STRONG><a name="[71]"></a>netconn_server_processing_thread</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, netconnserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netconn_server_processing_thread &rArr; esp_netconn_delete &rArr; flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_strfind
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_cat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_write
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_receive
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenPinNameStr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_thread_terminate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconnserver.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>prvCopyDataToQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[cc]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[cd]"></a>prvUnlockQueue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e1]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[da]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[f2]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f9]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[73]"></a>prvIdleTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[f4]"></a>prvInitialiseNewTask</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f8]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[f7]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[102]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[117]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[74]"></a>prvTimerTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[11b]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[11a]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[122]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[124]"></a>prvSwitchTimerLists</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[85]"></a>stackDump</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[86]"></a>SendChar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[138]"></a>flush_mboxes</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_isvalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_invalid
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_getnow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_delete
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_close
</UL>

<P><STRONG><a name="[75]"></a>esp_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = esp_evt &rArr; esp_device_is_present &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_get_type
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_device_is_present
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_netconn.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>netconn_evt</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, esp_netconn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = netconn_evt &rArr; esp_netconn_delete &rArr; flush_mboxes &rArr; esp_netconn_close &rArr;  flush_mboxes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_netconn_delete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_get_type
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_isvalid
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_ref
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_evt_conn_recv_get_buff
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_set_arg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_recved
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_server
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_client
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_from_evt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_get_arg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_netconn.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>def_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> esp.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>conn_timeout_cb</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = conn_timeout_cb &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_start_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_conn.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>conn_send</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_msg_to_producer_mbox
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_get_val_id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_sendto
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
</UL>

<P><STRONG><a name="[174]"></a>flush_buff</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, esp_conn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_core_lock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_sendto
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_send
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_close
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_write
</UL>

<P><STRONG><a name="[185]"></a>AT_PORT_SEND_CUR_DEF</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT_PORT_SEND_CUR_DEF
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
</UL>

<P><STRONG><a name="[18e]"></a>espi_tcpip_process_send_data</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = espi_tcpip_process_send_data &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_conn_is_active
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_port
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_number
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_ip_mac
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_data_sent
</UL>

<P><STRONG><a name="[18f]"></a>espi_tcpip_process_data_sent</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = espi_tcpip_process_data_sent &rArr; espi_tcpip_process_send_data &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1a6]"></a>espi_send_conn_error_cb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, esp_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_initiate_cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_events_for_timeout_or_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[191]"></a>espi_get_reset_sub_cmd</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, esp_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_sub_cmd
</UL>

<P><STRONG><a name="[190]"></a>espi_process_sub_cmd</STRONG> (Thumb, 744 bytes, Stack size 40 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = espi_process_sub_cmd &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_get_reset_sub_cmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[192]"></a>espi_parse_received</STRONG> (Thumb, 2456 bytes, Stack size 56 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = espi_parse_received &rArr; espi_process_sub_cmd &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_cb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_sem_release
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_ll_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free_s
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_number
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_mac
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_link_conn
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ipd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ip
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlif
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwlap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwjap
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cwdhcp
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipstatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_cipdomain
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_at_sdk_version
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_ip_sta
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_ap_conn_disconn_sta
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sta_getip
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_received_current_setting
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process_sub_cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_error_cb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_tcpip_process_data_sent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_conn_start_timeout
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_process
</UL>

<P><STRONG><a name="[18d]"></a>reset_connections</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = reset_connections &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_send_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_reset_everything
</UL>

<P><STRONG><a name="[199]"></a>is_received_current_setting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, esp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_received_current_setting &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espi_parse_received
</UL>

<P><STRONG><a name="[1ae]"></a>mem_insertfreeblock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[1b4]"></a>mem_assignmem</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_assignmem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_assignmemory
</UL>

<P><STRONG><a name="[1ad]"></a>mem_alloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_alloc &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_realloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[1af]"></a>mem_free</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_free &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_realloc
</UL>

<P><STRONG><a name="[1b0]"></a>mem_calloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, esp_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mem_calloc &rArr; mem_alloc &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_malloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_mem_calloc
</UL>

<P><STRONG><a name="[1bb]"></a>pbuf_skip</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, esp_pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_skip
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_get_linear_addr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_get_at
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_copy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_pbuf_take
</UL>

<P><STRONG><a name="[7e]"></a>ESP_UART_ll_thread</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ESP_UART_ll_thread &rArr; esp_input_process &rArr; espi_process &rArr; espi_parse_received &rArr; espi_process_sub_cmd &rArr; espi_send_conn_cb &rArr; esp_conn_close &rArr; flush_buff &rArr; conn_send &rArr; espi_send_msg_to_producer_mbox &rArr; esp_mem_free_s &rArr; esp_mem_free &rArr; esp_core_unlock &rArr; esp_sys_unprotect &rArr; esp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Start
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_input_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_ll_m48x.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>ESP_UART_DMA_TxDoneCB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP_UART_DMA_TxDoneCB &rArr; esp_sys_mbox_putnow &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_ll_m48x.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>ESP_UART_DMA_RxDoneCB</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ESP_UART_DMA_RxDoneCB &rArr; UART_DMA_RX_Start &rArr; dma_fill_description &rArr; fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_putnow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_untransfer_bytecount
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Stop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_RX_Start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_ll_m48x.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>send_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, esp_ll_m48x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = send_data &rArr; esp_sys_mbox_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_sys_mbox_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TX_Stop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TX_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp_ll_m48x.o(.text)
</UL>
<P><STRONG><a name="[1e0]"></a>fill_pdma_timeout</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fill_pdma_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTimeOut
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_fill_description
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_PDMA_Irq
</UL>

<P><STRONG><a name="[1e9]"></a>nu_ctz</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_PDMA_Irq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_allocate
</UL>

<P><STRONG><a name="[82]"></a>UART_DMA_Handler_TX</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMA_Handler_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m48x_uart.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>UART_DMA_Handler_RX</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m48x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMA_Handler_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m48x_uart.o(.text)
</UL>
<P><STRONG><a name="[1f2]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, m48x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMA_TXRX_Enable
</UL>

<P><STRONG><a name="[200]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[203]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[202]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --feedback=.\obj\template.fed --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -ID:\ARM\RV31\INC -ID:\ARM\CMSIS\Include -D__UVISION_VERSION=531 --omf_browse=.\obj\uart.crf ..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;41     {
000002  d503              BPL      |L1.12|
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  2270              MOVS     r2,#0x70
000006  6182              STR      r2,[r0,#0x18]
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  2208              MOVS     r2,#8
00000a  6182              STR      r2,[r0,#0x18]
                  |L1.12|
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  050a              LSLS     r2,r1,#20
00000e  d503              BPL      |L1.24|
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  6942              LDR      r2,[r0,#0x14]
000012  f0420201          ORR      r2,r2,#1
000016  6142              STR      r2,[r0,#0x14]
                  |L1.24|
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  048a              LSLS     r2,r1,#18
00001a  d501              BPL      |L1.32|
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  4a06              LDR      r2,|L1.56|
00001e  6182              STR      r2,[r0,#0x18]
                  |L1.32|
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000020  044a              LSLS     r2,r1,#17
000022  d501              BPL      |L1.40|
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000024  221f              MOVS     r2,#0x1f
000026  6442              STR      r2,[r0,#0x44]
                  |L1.40|
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
000028  0409              LSLS     r1,r1,#16
00002a  d504              BPL      |L1.54|
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  2180              MOVS     r1,#0x80
00002e  61c1              STR      r1,[r0,#0x1c]
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
000030  f240310f          MOV      r1,#0x30f
000034  6381              STR      r1,[r0,#0x38]
                  |L1.54|
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
000036  4770              BX       lr
;;;77     
                          ENDP

                  |L1.56|
                          DCD      0x01000001

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  UART_Close PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  2100              MOVS     r1,#0
;;;41     {
000002  6041              STR      r1,[r0,#4]
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  4770              BX       lr
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  UART_DisableFlowCtrl PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6841              LDR      r1,[r0,#4]
;;;41     {
000002  f4215140          BIC      r1,r1,#0x3000
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000006  6041              STR      r1,[r0,#4]
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  4770              BX       lr
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  UART_DisableInt PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;41     {
000002  438a              BICS     r2,r2,r1
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  6042              STR      r2,[r0,#4]
000006  4770              BX       lr
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  UART_EnableFlowCtrl PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6901              LDR      r1,[r0,#0x10]
;;;41     {
000002  f4417100          ORR      r1,r1,#0x200
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000006  6101              STR      r1,[r0,#0x10]
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  6941              LDR      r1,[r0,#0x14]
00000a  f4417180          ORR      r1,r1,#0x100
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000e  6141              STR      r1,[r0,#0x14]
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  6841              LDR      r1,[r0,#4]
000012  f4415140          ORR      r1,r1,#0x3000
000016  6041              STR      r1,[r0,#4]
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  4770              BX       lr
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  UART_EnableInt PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;41     {
000002  430a              ORRS     r2,r2,r1
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  6042              STR      r2,[r0,#4]
000006  4770              BX       lr
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  UART_Open PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;41     {
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  4604              MOV      r4,r0
000006  483c              LDR      r0,|L7.248|
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  460f              MOV      r7,r1
00000a  2500              MOVS     r5,#0
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  c80f              LDM      r0,{r0-r3}
00000e  e88d000f          STM      sp,{r0-r3}
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000012  493a              LDR      r1,|L7.252|
000014  462e              MOV      r6,r5
000016  f04f4080          MOV      r0,#0x40000000
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
00001a  428c              CMP      r4,r1
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  d106              BNE      |L7.44|
00001e  f8d01214          LDR      r1,[r0,#0x214]
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000022  f8d00220          LDR      r0,[r0,#0x220]
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000026  f3c16501          UBFX     r5,r1,#24,#2
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
00002a  e02a              B        |L7.130|
                  |L7.44|
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  4934              LDR      r1,|L7.256|
00002e  428c              CMP      r4,r1
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
000030  d106              BNE      |L7.64|
000032  f8d01214          LDR      r1,[r0,#0x214]
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
000036  f8d00220          LDR      r0,[r0,#0x220]
00003a  f3c16581          UBFX     r5,r1,#26,#2
00003e  e02b              B        |L7.152|
                  |L7.64|
000040  4930              LDR      r1,|L7.260|
000042  428c              CMP      r4,r1
000044  d108              BNE      |L7.88|
000046  f8d0121c          LDR      r1,[r0,#0x21c]
00004a  f8d00230          LDR      r0,[r0,#0x230]
00004e  f3c16501          UBFX     r5,r1,#24,#2
000052  f000060f          AND      r6,r0,#0xf
000056  e021              B        |L7.156|
                  |L7.88|
000058  492b              LDR      r1,|L7.264|
00005a  428c              CMP      r4,r1
00005c  d108              BNE      |L7.112|
00005e  f8d0121c          LDR      r1,[r0,#0x21c]
000062  f8d00230          LDR      r0,[r0,#0x230]
000066  f3c16581          UBFX     r5,r1,#26,#2
00006a  f3c01603          UBFX     r6,r0,#4,#4
00006e  e015              B        |L7.156|
                  |L7.112|
000070  4926              LDR      r1,|L7.268|
000072  428c              CMP      r4,r1
000074  d108              BNE      |L7.136|
000076  f8d0121c          LDR      r1,[r0,#0x21c]
00007a  f8d00230          LDR      r0,[r0,#0x230]
00007e  f3c17501          UBFX     r5,r1,#28,#2
                  |L7.130|
000082  f3c02603          UBFX     r6,r0,#8,#4
000086  e009              B        |L7.156|
                  |L7.136|
000088  4921              LDR      r1,|L7.272|
00008a  428c              CMP      r4,r1
00008c  d106              BNE      |L7.156|
00008e  f8d0121c          LDR      r1,[r0,#0x21c]
000092  f8d00230          LDR      r0,[r0,#0x230]
000096  0f8d              LSRS     r5,r1,#30
                  |L7.152|
000098  f3c03603          UBFX     r6,r0,#12,#4
                  |L7.156|
00009c  2000              MOVS     r0,#0
00009e  6320              STR      r0,[r4,#0x30]
0000a0  2003              MOVS     r0,#3
0000a2  60e0              STR      r0,[r4,#0xc]
0000a4  68a0              LDR      r0,[r4,#8]
0000a6  491b              LDR      r1,|L7.276|
0000a8  4008              ANDS     r0,r0,r1
0000aa  60a0              STR      r0,[r4,#8]
0000ac  46e8              MOV      r8,sp
0000ae  2d01              CMP      r5,#1
0000b0  d102              BNE      |L7.184|
0000b2  f7fffffe          BL       CLK_GetPLLClockFreq
0000b6  9001              STR      r0,[sp,#4]
                  |L7.184|
0000b8  2f00              CMP      r7,#0
0000ba  d01a              BEQ      |L7.242|
0000bc  f8581025          LDR      r1,[r8,r5,LSL #2]
0000c0  1c76              ADDS     r6,r6,#1
0000c2  fbb1f0f6          UDIV     r0,r1,r6
0000c6  eb000057          ADD      r0,r0,r7,LSR #1
0000ca  fbb0f0f7          UDIV     r0,r0,r7
0000ce  1e80              SUBS     r0,r0,#2
0000d0  f5b03f80          CMP      r0,#0x10000
0000d4  d30a              BCC      |L7.236|
0000d6  fbb1f0f6          UDIV     r0,r1,r6
0000da  eb0000c7          ADD      r0,r0,r7,LSL #3
0000de  fbb0f0f7          UDIV     r0,r0,r7
0000e2  f06f0101          MVN      r1,#1
0000e6  eb011010          ADD      r0,r1,r0,LSR #4
0000ea  e001              B        |L7.240|
                  |L7.236|
0000ec  f0405040          ORR      r0,r0,#0x30000000
                  |L7.240|
0000f0  6260              STR      r0,[r4,#0x24]
                  |L7.242|
0000f2  e8bd81ff          POP      {r0-r8,pc}
;;;77     
                          ENDP

0000f6  0000              DCW      0x0000
                  |L7.248|
                          DCD      ||.constdata||
                  |L7.252|
                          DCD      0x40070000
                  |L7.256|
                          DCD      0x40071000
                  |L7.260|
                          DCD      0x40072000
                  |L7.264|
                          DCD      0x40073000
                  |L7.268|
                          DCD      0x40074000
                  |L7.272|
                          DCD      0x40075000
                  |L7.276|
                          DCD      0xfff0ff0f

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  UART_Read PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b5f0              PUSH     {r4-r7,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  2600              MOVS     r6,#0
000006  4630              MOV      r0,r6
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  f04f4580          MOV      r5,#0x40000000
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  e00c              B        |L8.40|
                  |L8.14|
00000e  2300              MOVS     r3,#0
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  e002              B        |L8.24|
                  |L8.18|
000012  1c5b              ADDS     r3,r3,#1
000014  42ab              CMP      r3,r5
000016  d209              BCS      |L8.44|
                  |L8.24|
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  69a7              LDR      r7,[r4,#0x18]
00001a  047f              LSLS     r7,r7,#17
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  d4f9              BMI      |L8.18|
00001e  2e00              CMP      r6,#0
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000020  d104              BNE      |L8.44|
000022  6823              LDR      r3,[r4,#0]
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000024  540b              STRB     r3,[r1,r0]
000026  1c40              ADDS     r0,r0,#1
                  |L8.40|
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
000028  4290              CMP      r0,r2
00002a  d3f0              BCC      |L8.14|
                  |L8.44|
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  bdf0              POP      {r4-r7,pc}
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  UART_SetLineConfig PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;41     {
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  4604              MOV      r4,r0
000006  483c              LDR      r0,|L9.248|
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  469a              MOV      r10,r3
00000a  4691              MOV      r9,r2
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  460f              MOV      r7,r1
00000e  c80f              LDM      r0,{r0-r3}
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  f8ddb038          LDR      r11,[sp,#0x38]
000014  e88d000f          STM      sp,{r0-r3}
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  2500              MOVS     r5,#0
00001a  4938              LDR      r1,|L9.252|
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  462e              MOV      r6,r5
00001e  f04f4080          MOV      r0,#0x40000000
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000022  46e8              MOV      r8,sp
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000024  428c              CMP      r4,r1
000026  d106              BNE      |L9.54|
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
000028  f8d01214          LDR      r1,[r0,#0x214]
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  f8d00220          LDR      r0,[r0,#0x220]
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
000030  f3c16501          UBFX     r5,r1,#24,#2
000034  e02a              B        |L9.140|
                  |L9.54|
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
000036  4932              LDR      r1,|L9.256|
000038  428c              CMP      r4,r1
00003a  d106              BNE      |L9.74|
00003c  f8d01214          LDR      r1,[r0,#0x214]
000040  f8d00220          LDR      r0,[r0,#0x220]
000044  f3c16581          UBFX     r5,r1,#26,#2
000048  e02b              B        |L9.162|
                  |L9.74|
00004a  492e              LDR      r1,|L9.260|
00004c  428c              CMP      r4,r1
00004e  d108              BNE      |L9.98|
000050  f8d0121c          LDR      r1,[r0,#0x21c]
000054  f8d00230          LDR      r0,[r0,#0x230]
000058  f3c16501          UBFX     r5,r1,#24,#2
00005c  f000060f          AND      r6,r0,#0xf
000060  e021              B        |L9.166|
                  |L9.98|
000062  4929              LDR      r1,|L9.264|
000064  428c              CMP      r4,r1
000066  d108              BNE      |L9.122|
000068  f8d0121c          LDR      r1,[r0,#0x21c]
00006c  f8d00230          LDR      r0,[r0,#0x230]
000070  f3c16581          UBFX     r5,r1,#26,#2
000074  f3c01603          UBFX     r6,r0,#4,#4
000078  e015              B        |L9.166|
                  |L9.122|
00007a  4924              LDR      r1,|L9.268|
00007c  428c              CMP      r4,r1
00007e  d108              BNE      |L9.146|
000080  f8d0121c          LDR      r1,[r0,#0x21c]
000084  f8d00230          LDR      r0,[r0,#0x230]
000088  f3c17501          UBFX     r5,r1,#28,#2
                  |L9.140|
00008c  f3c02603          UBFX     r6,r0,#8,#4
000090  e009              B        |L9.166|
                  |L9.146|
000092  491f              LDR      r1,|L9.272|
000094  428c              CMP      r4,r1
000096  d10b              BNE      |L9.176|
000098  f8d0121c          LDR      r1,[r0,#0x21c]
00009c  f8d00230          LDR      r0,[r0,#0x230]
0000a0  0f8d              LSRS     r5,r1,#30
                  |L9.162|
0000a2  f3c03603          UBFX     r6,r0,#12,#4
                  |L9.166|
0000a6  2d01              CMP      r5,#1
0000a8  d102              BNE      |L9.176|
0000aa  f7fffffe          BL       CLK_GetPLLClockFreq
0000ae  9001              STR      r0,[sp,#4]
                  |L9.176|
0000b0  b1d7              CBZ      r7,|L9.232|
0000b2  f8581025          LDR      r1,[r8,r5,LSL #2]
0000b6  1c76              ADDS     r6,r6,#1
0000b8  fbb1f0f6          UDIV     r0,r1,r6
0000bc  eb000057          ADD      r0,r0,r7,LSR #1
0000c0  fbb0f0f7          UDIV     r0,r0,r7
0000c4  1e80              SUBS     r0,r0,#2
0000c6  f5b03f80          CMP      r0,#0x10000
0000ca  d30a              BCC      |L9.226|
0000cc  fbb1f0f6          UDIV     r0,r1,r6
0000d0  eb0000c7          ADD      r0,r0,r7,LSL #3
0000d4  fbb0f0f7          UDIV     r0,r0,r7
0000d8  f06f0101          MVN      r1,#1
0000dc  eb011010          ADD      r0,r1,r0,LSR #4
0000e0  e001              B        |L9.230|
                  |L9.226|
0000e2  f0405040          ORR      r0,r0,#0x30000000
                  |L9.230|
0000e6  6260              STR      r0,[r4,#0x24]
                  |L9.232|
0000e8  ea49000a          ORR      r0,r9,r10
0000ec  ea40000b          ORR      r0,r0,r11
0000f0  60e0              STR      r0,[r4,#0xc]
0000f2  e8bd9fff          POP      {r0-r12,pc}
;;;77     
                          ENDP

0000f6  0000              DCW      0x0000
                  |L9.248|
                          DCD      ||.constdata||+0x10
                  |L9.252|
                          DCD      0x40070000
                  |L9.256|
                          DCD      0x40071000
                  |L9.260|
                          DCD      0x40072000
                  |L9.264|
                          DCD      0x40073000
                  |L9.268|
                          DCD      0x40074000
                  |L9.272|
                          DCD      0x40075000

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  UART_SetTimeoutCnt PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  6a02              LDR      r2,[r0,#0x20]
;;;41     {
000002  f02202ff          BIC      r2,r2,#0xff
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000006  430a              ORRS     r2,r2,r1
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  6202              STR      r2,[r0,#0x20]
00000a  6841              LDR      r1,[r0,#4]
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  f4416100          ORR      r1,r1,#0x800
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  6041              STR      r1,[r0,#4]
000012  4770              BX       lr
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.11||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.text||
                  UART_SelectIrDAMode PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;41     {
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  4604              MOV      r4,r0
000006  483c              LDR      r0,|L11.248|
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  4691              MOV      r9,r2
00000a  460f              MOV      r7,r1
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  c80f              LDM      r0,{r0-r3}
00000e  e88d000f          STM      sp,{r0-r3}
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000012  2500              MOVS     r5,#0
000014  2002              MOVS     r0,#2
000016  462e              MOV      r6,r5
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  6320              STR      r0,[r4,#0x30]
00001a  4938              LDR      r1,|L11.252|
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  0740              LSLS     r0,r0,#29
00001e  46e8              MOV      r8,sp
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000020  428c              CMP      r4,r1
000022  d106              BNE      |L11.50|
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000024  f8d01214          LDR      r1,[r0,#0x214]
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
000028  f8d00220          LDR      r0,[r0,#0x220]
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  f3c16501          UBFX     r5,r1,#24,#2
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
000030  e02a              B        |L11.136|
                  |L11.50|
000032  4933              LDR      r1,|L11.256|
000034  428c              CMP      r4,r1
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
000036  d106              BNE      |L11.70|
000038  f8d01214          LDR      r1,[r0,#0x214]
00003c  f8d00220          LDR      r0,[r0,#0x220]
000040  f3c16581          UBFX     r5,r1,#26,#2
000044  e02b              B        |L11.158|
                  |L11.70|
000046  492f              LDR      r1,|L11.260|
000048  428c              CMP      r4,r1
00004a  d108              BNE      |L11.94|
00004c  f8d0121c          LDR      r1,[r0,#0x21c]
000050  f8d00230          LDR      r0,[r0,#0x230]
000054  f3c16501          UBFX     r5,r1,#24,#2
000058  f000060f          AND      r6,r0,#0xf
00005c  e021              B        |L11.162|
                  |L11.94|
00005e  492a              LDR      r1,|L11.264|
000060  428c              CMP      r4,r1
000062  d108              BNE      |L11.118|
000064  f8d0121c          LDR      r1,[r0,#0x21c]
000068  f8d00230          LDR      r0,[r0,#0x230]
00006c  f3c16581          UBFX     r5,r1,#26,#2
000070  f3c01603          UBFX     r6,r0,#4,#4
000074  e015              B        |L11.162|
                  |L11.118|
000076  4925              LDR      r1,|L11.268|
000078  428c              CMP      r4,r1
00007a  d108              BNE      |L11.142|
00007c  f8d0121c          LDR      r1,[r0,#0x21c]
000080  f8d00230          LDR      r0,[r0,#0x230]
000084  f3c17501          UBFX     r5,r1,#28,#2
                  |L11.136|
000088  f3c02603          UBFX     r6,r0,#8,#4
00008c  e009              B        |L11.162|
                  |L11.142|
00008e  4920              LDR      r1,|L11.272|
000090  428c              CMP      r4,r1
000092  d10b              BNE      |L11.172|
000094  f8d0121c          LDR      r1,[r0,#0x21c]
000098  f8d00230          LDR      r0,[r0,#0x230]
00009c  0f8d              LSRS     r5,r1,#30
                  |L11.158|
00009e  f3c03603          UBFX     r6,r0,#12,#4
                  |L11.162|
0000a2  2d01              CMP      r5,#1
0000a4  d102              BNE      |L11.172|
0000a6  f7fffffe          BL       CLK_GetPLLClockFreq
0000aa  9001              STR      r0,[sp,#4]
                  |L11.172|
0000ac  b187              CBZ      r7,|L11.208|
0000ae  f8580025          LDR      r0,[r8,r5,LSL #2]
0000b2  1c76              ADDS     r6,r6,#1
0000b4  fbb0f0f6          UDIV     r0,r0,r6
0000b8  eb0000c7          ADD      r0,r0,r7,LSL #3
0000bc  fbb0f0f7          UDIV     r0,r0,r7
0000c0  f06f0101          MVN      r1,#1
0000c4  eb011010          ADD      r0,r1,r0,LSR #4
0000c8  0c09              LSRS     r1,r1,#16
0000ca  4288              CMP      r0,r1
0000cc  d200              BCS      |L11.208|
0000ce  6260              STR      r0,[r4,#0x24]
                  |L11.208|
0000d0  6aa0              LDR      r0,[r4,#0x28]
0000d2  f1b90f00          CMP      r9,#0
0000d6  d008              BEQ      |L11.234|
0000d8  f0200020          BIC      r0,r0,#0x20
0000dc  62a0              STR      r0,[r4,#0x28]
0000de  6aa0              LDR      r0,[r4,#0x28]
0000e0  f0400002          ORR      r0,r0,#2
                  |L11.228|
0000e4  62a0              STR      r0,[r4,#0x28]
0000e6  e8bd87ff          POP      {r0-r10,pc}
                  |L11.234|
0000ea  f0400040          ORR      r0,r0,#0x40
0000ee  62a0              STR      r0,[r4,#0x28]
0000f0  6aa0              LDR      r0,[r4,#0x28]
0000f2  f0200002          BIC      r0,r0,#2
0000f6  e7f5              B        |L11.228|
;;;77     
                          ENDP

                  |L11.248|
                          DCD      ||.constdata||+0x20
                  |L11.252|
                          DCD      0x40070000
                  |L11.256|
                          DCD      0x40071000
                  |L11.260|
                          DCD      0x40072000
                  |L11.264|
                          DCD      0x40073000
                  |L11.268|
                          DCD      0x40074000
                  |L11.272|
                          DCD      0x40075000

                          AREA ||area_number.12||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.text||
                  UART_SelectRS485Mode PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  2303              MOVS     r3,#3
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  6303              STR      r3,[r0,#0x30]
000006  6ac3              LDR      r3,[r0,#0x2c]
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  4c04              LDR      r4,|L12.28|
00000a  4023              ANDS     r3,r3,r4
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  62c3              STR      r3,[r0,#0x2c]
00000e  6ac3              LDR      r3,[r0,#0x2c]
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  ea416102          ORR      r1,r1,r2,LSL #24
000014  430b              ORRS     r3,r3,r1
000016  62c3              STR      r3,[r0,#0x2c]
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  bd10              POP      {r4,pc}
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x00fff8ff

                          AREA ||area_number.13||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.text||
                  UART_SelectLINMode PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  2301              MOVS     r3,#1
;;;41     {
000002  6303              STR      r3,[r0,#0x30]
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  6ac3              LDR      r3,[r0,#0x2c]
000006  f02303cf          BIC      r3,r3,#0xcf
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
00000a  62c3              STR      r3,[r0,#0x2c]
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  6ac3              LDR      r3,[r0,#0x2c]
00000e  4311              ORRS     r1,r1,r2
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  430b              ORRS     r3,r3,r1
000012  62c3              STR      r3,[r0,#0x2c]
000014  4770              BX       lr
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  UART_Write PROC
;;;39     
;;;40     void UART_ClearIntFlag(UART_T* uart, uint32_t u32InterruptFlag)
000000  b5f0              PUSH     {r4-r7,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     
;;;43         if(u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
;;;44         {
;;;45             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
000004  2600              MOVS     r6,#0
000006  4630              MOV      r0,r6
;;;46             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000008  f04f4580          MOV      r5,#0x40000000
;;;47         }
;;;48     
;;;49         if(u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
00000c  e00c              B        |L14.40|
                  |L14.14|
00000e  2300              MOVS     r3,#0
;;;50         {
;;;51             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
000010  e002              B        |L14.24|
                  |L14.18|
000012  1c5b              ADDS     r3,r3,#1
000014  42ab              CMP      r3,r5
000016  d209              BCS      |L14.44|
                  |L14.24|
;;;52         }
;;;53         else
;;;54         {
;;;55         }
;;;56     
;;;57         if(u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000018  69a7              LDR      r7,[r4,#0x18]
00001a  023f              LSLS     r7,r7,#8
;;;58         {
;;;59             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
00001c  d4f9              BMI      |L14.18|
00001e  2e00              CMP      r6,#0
;;;60         }
;;;61     
;;;62         if(u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
000020  d104              BNE      |L14.44|
000022  5c0b              LDRB     r3,[r1,r0]
;;;63         {
;;;64             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
000024  6023              STR      r3,[r4,#0]
000026  1c40              ADDS     r0,r0,#1
                  |L14.40|
;;;65                           UART_WKSTS_RFRTWKF_Msk |UART_WKSTS_RS485WKF_Msk |
;;;66                           UART_WKSTS_TOUTWKF_Msk;
;;;67         }
;;;68     
;;;69         if(u32InterruptFlag & UART_INTSTS_LININT_Msk)   /* Clear LIN Bus Interrupt */
000028  4290              CMP      r0,r2
00002a  d1f0              BNE      |L14.14|
                  |L14.44|
;;;70         {
;;;71             uart->INTSTS = UART_INTSTS_LINIF_Msk;
00002c  bdf0              POP      {r4-r7,pc}
;;;72             uart->LINSTS = UART_LINSTS_BITEF_Msk    | UART_LINSTS_BRKDETF_Msk  |
;;;73                            UART_LINSTS_SLVSYNCF_Msk | UART_LINSTS_SLVIDPEF_Msk |
;;;74                            UART_LINSTS_SLVHEF_Msk   | UART_LINSTS_SLVHDETF_Msk ;
;;;75         }
;;;76     }
;;;77     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x00b71b00
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x00b71b00
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x00b71b00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 402
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____RRX|
#line 587
|__asm___6_uart_c_f12f5b44____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

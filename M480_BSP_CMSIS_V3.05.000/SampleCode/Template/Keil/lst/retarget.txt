; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --feedback=.\obj\template.fed --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -ID:\ARM\RV31\INC -ID:\ARM\CMSIS\Include -D__UVISION_VERSION=531 --omf_browse=.\obj\retarget.crf ..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;75      */
;;;76     void Hard_Fault_Handler(uint32_t stack[])
000000  4604              MOV      r4,r0
;;;77     {
;;;78         printf("In Hard Fault Handler\n");
000002  a020              ADR      r0,|L1.132|
000004  f7fffffe          BL       __2printf
;;;79     
;;;80         stackDump(stack);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       stackDump
                  |L1.14|
;;;81         /* Replace while(1) with chip reset if WDT is not enabled for end product */
;;;82         while(1);
00000e  e7fe              B        |L1.14|
;;;83         /* SYS->IPRST0 = SYS_IPRST0_CHIPRST_Msk; */
;;;84     }
;;;85     
                          ENDP

                  fputc PROC
;;;670    
;;;671    int fputc(int ch, FILE *stream)
000010  b510              PUSH     {r4,lr}
;;;672    {
000012  4604              MOV      r4,r0
;;;673        SendChar(ch);
000014  f7fffffe          BL       SendChar
;;;674        return ch;
000018  4620              MOV      r0,r4
;;;675    }
00001a  bd10              POP      {r4,pc}
;;;676    
                          ENDP

                  ferror PROC
;;;740    
;;;741    int ferror(FILE *stream)
00001c  f04f30ff          MOV      r0,#0xffffffff
;;;742    {
;;;743        return EOF;
;;;744    }
000020  4770              BX       lr
;;;745    #endif
                          ENDP

                  stackDump PROC
;;;57      */
;;;58     static void stackDump(uint32_t stack[])
000022  b510              PUSH     {r4,lr}
;;;59     {
000024  4604              MOV      r4,r0
;;;60         printf("r0  = 0x%x\n", stack[r0]);
000026  6801              LDR      r1,[r0,#0]
000028  a01c              ADR      r0,|L1.156|
00002a  f7fffffe          BL       __2printf
;;;61         printf("r1  = 0x%x\n", stack[r1]);
00002e  a01e              ADR      r0,|L1.168|
000030  6861              LDR      r1,[r4,#4]
000032  f7fffffe          BL       __2printf
;;;62         printf("r2  = 0x%x\n", stack[r2]);
000036  a01f              ADR      r0,|L1.180|
000038  68a1              LDR      r1,[r4,#8]
00003a  f7fffffe          BL       __2printf
;;;63         printf("r3  = 0x%x\n", stack[r3]);
00003e  a020              ADR      r0,|L1.192|
000040  68e1              LDR      r1,[r4,#0xc]
000042  f7fffffe          BL       __2printf
;;;64         printf("r12 = 0x%x\n", stack[r12]);
000046  a021              ADR      r0,|L1.204|
000048  6921              LDR      r1,[r4,#0x10]
00004a  f7fffffe          BL       __2printf
;;;65         printf("lr  = 0x%x\n", stack[lr]);
00004e  a022              ADR      r0,|L1.216|
000050  6961              LDR      r1,[r4,#0x14]
000052  f7fffffe          BL       __2printf
;;;66         printf("pc  = 0x%x\n", stack[pc]);
000056  a023              ADR      r0,|L1.228|
000058  69a1              LDR      r1,[r4,#0x18]
00005a  f7fffffe          BL       __2printf
;;;67         printf("psr = 0x%x\n", stack[psr]);
00005e  69e1              LDR      r1,[r4,#0x1c]
000060  e8bd4010          POP      {r4,lr}
000064  a022              ADR      r0,|L1.240|
000066  f7ffbffe          B.W      __2printf
;;;68     }
;;;69     
                          ENDP

                  SendChar PROC
;;;519     */
;;;520    static void SendChar(int ch)
00006a  4924              LDR      r1,|L1.252|
                  |L1.108|
00006c  698a              LDR      r2,[r1,#0x18]
00006e  0212              LSLS     r2,r2,#8
000070  d4fc              BMI      |L1.108|
000072  280a              CMP      r0,#0xa
000074  d104              BNE      |L1.128|
000076  220d              MOVS     r2,#0xd
000078  600a              STR      r2,[r1,#0]
                  |L1.122|
00007a  698a              LDR      r2,[r1,#0x18]
00007c  0212              LSLS     r2,r2,#8
00007e  d4fc              BMI      |L1.122|
                  |L1.128|
000080  6008              STR      r0,[r1,#0]
;;;521    {
;;;522    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;523        g_buf[g_buf_len++] = ch;
;;;524        g_buf[g_buf_len] = '\0';
;;;525        if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;526        {
;;;527            /* Send the char */
;;;528            if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;529            {
;;;530                g_buf_len = 0;
;;;531                return;
;;;532            }
;;;533            else
;;;534            {
;;;535    #ifndef DISABLE_UART
;;;536                int i;
;;;537    
;;;538                for(i = 0; i < g_buf_len; i++)
;;;539                    SendChar_ToUART(g_buf[i]);
;;;540    #endif
;;;541                g_buf_len = 0;
;;;542            }
;;;543        }
;;;544    #else
;;;545    #ifndef DISABLE_UART
;;;546        SendChar_ToUART(ch);
;;;547    #endif
;;;548    #endif
;;;549    }
000082  4770              BX       lr
;;;550    
                          ENDP

                  |L1.132|
000084  496e2048          DCB      "In Hard Fault Handler\n",0
000088  61726420
00008c  4661756c
000090  74204861
000094  6e646c65
000098  720a00  
00009b  00                DCB      0
                  |L1.156|
00009c  72302020          DCB      "r0  = 0x%x\n",0
0000a0  3d203078
0000a4  25780a00
                  |L1.168|
0000a8  72312020          DCB      "r1  = 0x%x\n",0
0000ac  3d203078
0000b0  25780a00
                  |L1.180|
0000b4  72322020          DCB      "r2  = 0x%x\n",0
0000b8  3d203078
0000bc  25780a00
                  |L1.192|
0000c0  72332020          DCB      "r3  = 0x%x\n",0
0000c4  3d203078
0000c8  25780a00
                  |L1.204|
0000cc  72313220          DCB      "r12 = 0x%x\n",0
0000d0  3d203078
0000d4  25780a00
                  |L1.216|
0000d8  6c722020          DCB      "lr  = 0x%x\n",0
0000dc  3d203078
0000e0  25780a00
                  |L1.228|
0000e4  70632020          DCB      "pc  = 0x%x\n",0
0000e8  3d203078
0000ec  25780a00
                  |L1.240|
0000f0  70737220          DCB      "psr = 0x%x\n",0
0000f4  3d203078
0000f8  25780a00
                  |L1.252|
                          DCD      0x40070000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  kbhit PROC
;;;607    
;;;608    int kbhit(void)
000000  4802              LDR      r0,|L2.12|
;;;609    {
;;;610    #ifndef DISABLE_UART
;;;611        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  f3c03080          UBFX     r0,r0,#14,#1
;;;612    #else
;;;613        return 0;
;;;614    #endif
;;;615    }
000008  4770              BX       lr
;;;616    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40070000

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  IsDebugFifoEmpty PROC
;;;607    
;;;608    int kbhit(void)
000000  4802              LDR      r0,|L3.12|
;;;609    {
;;;610    #ifndef DISABLE_UART
;;;611        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  f3c07000          UBFX     r0,r0,#28,#1
;;;612    #else
;;;613        return 0;
;;;614    #endif
;;;615    }
000008  4770              BX       lr
;;;616    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40070000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  _ttywrch PROC
;;;607    
;;;608    int kbhit(void)
000000  f7ffbffe          B.W      SendChar
;;;609    {
;;;610    #ifndef DISABLE_UART
;;;611        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
;;;612    #else
;;;613        return 0;
;;;614    #endif
;;;615    }
;;;616    /**
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  fgetc PROC
;;;607    
;;;608    int kbhit(void)
000000  4803              LDR      r0,|L5.16|
                  |L5.2|
;;;609    {
;;;610    #ifndef DISABLE_UART
;;;611        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L5.2|
;;;612    #else
;;;613        return 0;
;;;614    #endif
;;;615    }
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
00000c  4770              BX       lr
;;;616    /**
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40070000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 402
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____RRX|
#line 587
|__asm___10_retarget_c_d5a1b03f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 410 "..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 411

 MOVS r0, #4
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\template.fed --cpu=Cortex-M4.fp.sp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -ID:\ARM\RV31\INC -ID:\ARM\CMSIS\Include -D__UVISION_VERSION=531 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;12     
;;;13     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  0784              LSLS     r4,r0,#30
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L1.10|
00000a  f8c40100          STR      r0,[r4,#0x100]
00000e  f8c41100          STR      r1,[r4,#0x100]
000012  f8c42100          STR      r2,[r4,#0x100]
000016  f8d43100          LDR      r3,[r4,#0x100]
00001a  2b00              CMP      r3,#0
00001c  d0f5              BEQ      |L1.10|
;;;14     {
;;;15         /*---------------------------------------------------------------------------------------------------------*/
;;;16         /* Init System Clock                                                                                       */
;;;17         /*---------------------------------------------------------------------------------------------------------*/
;;;18         /* Unlock protected registers */
;;;19         SYS_UnlockReg();
;;;20     
;;;21         /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;22         PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
00001e  f04f2040          MOV      r0,#0x40004000
000022  f8d01140          LDR      r1,[r0,#0x140]
000026  f02101f0          BIC      r1,r1,#0xf0
00002a  f8c01140          STR      r1,[r0,#0x140]
;;;23     
;;;24         /* Enable External XTAL (4~24 MHz) */
;;;25         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       CLK_EnableXtalRC
;;;26     
;;;27         /* Waiting for 12MHz clock ready */
;;;28         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       CLK_WaitClockReady
;;;29     
;;;30         /* Set core clock as PLL_CLOCK from PLL */
;;;31         CLK_SetCoreClock(PLL_CLOCK);
00003a  4814              LDR      r0,|L1.140|
00003c  f7fffffe          BL       CLK_SetCoreClock
;;;32         /* Set PCLK0/PCLK1 to HCLK/2 */
;;;33         CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2);
000040  2011              MOVS     r0,#0x11
000042  f8c40234          STR      r0,[r4,#0x234]
;;;34     
;;;35         /* Enable UART clock */
;;;36         CLK_EnableModuleClock(UART0_MODULE);
000046  4d12              LDR      r5,|L1.144|
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;37     
;;;38         /* Select UART clock source from HXT */
;;;39         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HXT, CLK_CLKDIV0_UART0(1));
00004e  2200              MOVS     r2,#0
000050  4611              MOV      r1,r2
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       CLK_SetModuleClock
;;;40     
;;;41         /* Update System Core Clock */
;;;42         /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;43         SystemCoreClockUpdate();
000058  f7fffffe          BL       SystemCoreClockUpdate
;;;44     
;;;45     
;;;46     
;;;47         /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;48         SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
00005c  6be0              LDR      r0,[r4,#0x3c]
00005e  f420007f          BIC      r0,r0,#0xff0000
000062  63e0              STR      r0,[r4,#0x3c]
;;;49         SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000064  6be0              LDR      r0,[r4,#0x3c]
000066  f44000cc          ORR      r0,r0,#0x660000
00006a  63e0              STR      r0,[r4,#0x3c]
00006c  2000              MOVS     r0,#0
00006e  f8c40100          STR      r0,[r4,#0x100]
;;;50         /* Lock protected registers */
;;;51         SYS_LockReg();
;;;52     }
000072  bd70              POP      {r4-r6,pc}
;;;53     
                          ENDP

                  main PROC
;;;61     
;;;62     int main()
000074  f7fffffe          BL       SYS_Init
;;;63     {
;;;64     
;;;65         SYS_Init();
;;;66         /* Init UART to 115200-8n1 for print message */
;;;67         UART_Open(UART0, 115200);
000078  f44f31e1          MOV      r1,#0x1c200
00007c  4805              LDR      r0,|L1.148|
00007e  f7fffffe          BL       UART_Open
;;;68         /* Connect UART to PC, and open a terminal tool to receive following message */
;;;69         printf("Hello World\n");
000082  a005              ADR      r0,|L1.152|
000084  f7fffffe          BL       __2printf
                  |L1.136|
;;;70     
;;;71         /* Got no where to go, just loop forever */
;;;72         while(1);
000088  e7fe              B        |L1.136|
;;;73     
;;;74     }
;;;75     
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x0b71b000
                  |L1.144|
                          DCD      0x57803d10
                  |L1.148|
                          DCD      0x40070000
                  |L1.152|
000098  48656c6c          DCB      "Hello World\n",0
00009c  6f20576f
0000a0  726c640a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____RRX|
#line 587
|__asm___6_main_c_SYS_Init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
